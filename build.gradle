group "pl.itgolo"
version "1.0.1"
def title = "SemStat"
def iconApp = "/Application/Resources/Assets/Images/Icons/app.png"
def iconAppIco = "/src/main/java/Application/Resources/Assets/Images/Icons/app.ico"
def url = "http://itgolo.pl"
def jreMinVersionMustBe = "1.8.0"
def versionExe = version

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.2"
        classpath "gradle.plugin.de.inetsoftware:SetupBuilder:1.8.0"
    }
}

apply plugin: "java"
apply plugin: "edu.sc.seis.launch4j"
apply plugin: "de.inetsoftware.setupbuilder"

repositories {
    mavenCentral()
}

dependencies {
    compile group: "org.apache.maven", name: "maven-artifact", version: "3.0.3"
    compile group: "joda-time", name: "joda-time", version: "2.9.4"
    compile group: "com.googlecode.libphonenumber", name: "libphonenumber", version: "7.7.1"
    compile group: "com.google.collections", name: "google-collections", version: "1.0"
    compile group: "mysql", name: "mysql-connector-java", version: "6.0.4"
    compile group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.8.3"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.4"
    compile "com.google.apis:google-api-services-customsearch:v1-rev51-1.22.0"
    compile group: "org.jsoup", name: "jsoup", version: "1.9.2"
    compile group: "org.apache.logging.log4j", name: "log4j-api", version: "2.6.2"
    compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.6.2"
    compile group: "org.seleniumhq.selenium", name: "selenium-java", version: "3.0.0-beta3"
    compile group: "org.seleniumhq.selenium", name: "selenium-chrome-driver", version: "3.0.0-beta3"
    testCompile group: "junit", name: "junit", version: "4.11"
}

// Przełączenie biblioteki gradle do wersji 3.0
task wrapper(type: Wrapper) {
    gradleVersion = "3.0"
}

// Kopiowanie bibliotek dla wersji produkcyjnej
sourceSets {
    main {
        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
            includes = ["**/*.fxml", "**/*.xml", "**/*.properties", "**/*.css",
                        "**/*.png", "**/*.gif", "**/*.jpg", "**/*.ico"]
        }
    }
}

// Domyślne ustawienia ustalane w jednym miejscu
// a następnie przekazywane do działającej aplikacji
File file = new File("$project.rootDir/src/main/java/Application/Resources/properties.properties")
Properties props = new Properties()
props.setProperty("version", version)
props.setProperty("title", title)
props.setProperty("iconApp", iconApp)
props.setProperty("projectName", project.name)
props.setProperty("url", url)
props.setProperty("urlProject", "${url}/semstat")
props.setProperty("default_processor_limit_threads", "10")
props.setProperty("default_google_queries_of_keyword", "1")
props.setProperty("minimality_urls_in_file_for_long_analyzed", "15")
props.setProperty("default_robot_limit_sub_site_analyze_domain", "15")
props.setProperty("user_agent", "Application SemStat ${version} for SEO & SEM. Visit www.itgolo.pl.")
props.setProperty("default_bot_extensions_domain", ".pl, .com, .net, .info, .eu")
props.setProperty("license_salt", "#123dsfg@werER##")
props.setProperty("url_app_versions", "${url}/appVersions.txt")
props.store(file.newWriter(), null)

// Settings for the creation of the output file jar.
jar {
    manifest {
        attributes 'Implementation-Title': title,
                'Implementation-Version': version,
                "Main-Class": "Run",
                "Class-Path": configurations.runtime.files.collect { "lib/$it.name" }.join(' ')

    }
    baseName = project.name
}


task copyDrivers(type: Copy) {
    into "$buildDir/libs/drivers"
    from "$projectDir/drivers"
}

task copyUrls(type: Copy) {
    into "$buildDir/libs"
    from "$projectDir/urls.txt"
}

task copyToLib(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
}

// Configuration for launch4j
launch4j {
    mainClassName = 'Run'
    outfile = "${project.name}-${versionExe}.exe"
    icon = "${project.rootDir}${iconAppIco}"
    version = versionExe
    companyName = "ITGolo"
    productName = "${title}"
    jreMinVersion = jreMinVersionMustBe
    copyright = "ITGolo"
    description = title
}

setupBuilder {
    vendor = "ITGolo"
    application = "${title}"
    appIdentifier = "${project.name}"
    description = "This robot get unique domain with website content keyword."
    icons = "${project.rootDir}${iconAppIco}"

    licenseFile "LICENSE.md"
    licenseFile {
        locale = "pl"
        resource = "LICENSE_PL.md"
    }
    licenseFile {
        locale = "en"
        resource = "LICENSE.md"
    }
    version = versionExe

    //from jar.outputs
    from("${project.rootDir}/build/libs") {
        include "**/*.*"
    }

    bundleJre = 1.8
    mainClass = "Run"
    mainJar = "${project.rootDir}/build/libs/${project.name}-${version}.jar"

}

task msi64( type: com.inet.gradle.setup.msi.Msi ) {
    // setting for 64 bit platform
}
msi {
    arch = "x86"
    classifier = "x86"
}
configure( [msi, msi64] ) {

    languages = ["pl-PL", "en-us"]
    multiInstanceCount = 100
    // files only for the Windows platform
    from("${project.rootDir}/build/launch4j") {
        include "*.exe"
    }
    doFirst {
        // create a shortcut on Windows platform with placeholder
        setupBuilder.desktopStarter {
            displayName = "${title}"
            executable = "${project.name}-${version}.exe"
        }
    }
}